North_Carolina_occupations <- html_nodes(North_Carolina, "table.occupations_table")
#Parse an html table into a data frame.
html_table(North_Carolina_occupations)
North_Carolina_Occupations_1 <- html_table(North_Carolina_occupations[[1]])
#Add the State Name as a Column
North_Carolina_Occupations_1$State <- "North_Carolina"
North_Carolina_Occupations_1 <- North_Carolina_Occupations_1[,c(3, 1:2)]
#Create variable with html of North_Dakota
North_Dakota <- read_html("http://livingwage.mit.edu/states/38")
# Grab all the tables from the webpage
North_Dakota_tbls <- html_nodes(North_Dakota, "table")
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
North_Dakota_wages <- html_nodes(North_Dakota, "table.wages_table")
#Parse an html table into a data frame.
html_table(North_Dakota_wages)
North_Dakota_Wages_1 <- html_table(North_Dakota_wages[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
North_Dakota_expenses <- html_nodes(North_Dakota, "table.expenses_table")
North_Dakota_all_tables <- html_nodes(North_Dakota, "table")
#Parse an html table into a data frame.
html_table(North_Dakota_expenses)
North_Dakota_Expenses_1 <- html_table(North_Dakota_expenses[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
North_Dakota_occupations <- html_nodes(North_Dakota, "table.occupations_table")
#Parse an html table into a data frame.
html_table(North_Dakota_occupations)
North_Dakota_Occupations_1 <- html_table(North_Dakota_occupations[[1]])
#Add the State Name as a Column
North_Dakota_Occupations_1$State <- "North_Dakota"
North_Dakota_Occupations_1 <- North_Dakota_Occupations_1[,c(3, 1:2)]
#Create variable with html of Ohio
Ohio <- read_html("http://livingwage.mit.edu/states/39")
# Grab all the tables from the webpage
Ohio_tbls <- html_nodes(Ohio, "table")
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Ohio_wages <- html_nodes(Ohio, "table.wages_table")
#Parse an html table into a data frame.
html_table(Ohio_wages)
Ohio_Wages_1 <- html_table(Ohio_wages[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Ohio_expenses <- html_nodes(Ohio, "table.expenses_table")
Ohio_all_tables <- html_nodes(Ohio, "table")
#Parse an html table into a data frame.
html_table(Ohio_expenses)
Ohio_Expenses_1 <- html_table(Ohio_expenses[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Ohio_occupations <- html_nodes(Ohio, "table.occupations_table")
#Parse an html table into a data frame.
html_table(Ohio_occupations)
Ohio_Occupations_1 <- html_table(Ohio_occupations[[1]])
#Add the State Name as a Column
Ohio_Occupations_1$State <- "Ohio"
Ohio_Occupations_1 <- Ohio_Occupations_1[,c(3, 1:2)]
#Create variable with html of Oklahoma
Oklahoma <- read_html("http://livingwage.mit.edu/states/40")
# Grab all the tables from the webpage
Oklahoma_tbls <- html_nodes(Oklahoma, "table")
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Oklahoma_wages <- html_nodes(Oklahoma, "table.wages_table")
#Parse an html table into a data frame.
html_table(Oklahoma_wages)
Oklahoma_Wages_1 <- html_table(Oklahoma_wages[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Oklahoma_expenses <- html_nodes(Oklahoma, "table.expenses_table")
Oklahoma_all_tables <- html_nodes(Oklahoma, "table")
#Parse an html table into a data frame.
html_table(Oklahoma_expenses)
Oklahoma_Expenses_1 <- html_table(Oklahoma_expenses[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Oklahoma_occupations <- html_nodes(Oklahoma, "table.occupations_table")
#Parse an html table into a data frame.
html_table(Oklahoma_occupations)
Oklahoma_Occupations_1 <- html_table(Oklahoma_occupations[[1]])
#Add the State Name as a Column
Oklahoma_Occupations_1$State <- "Oklahoma"
Oklahoma_Occupations_1 <- Oklahoma_Occupations_1[,c(3, 1:2)]
#Create variable with html of Oregon
Oregon <- read_html("http://livingwage.mit.edu/states/41")
# Grab all the tables from the webpage
Oregon_tbls <- html_nodes(Oregon, "table")
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Oregon_wages <- html_nodes(Oregon, "table.wages_table")
#Parse an html table into a data frame.
html_table(Oregon_wages)
Oregon_Wages_1 <- html_table(Oregon_wages[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Oregon_expenses <- html_nodes(Oregon, "table.expenses_table")
Oregon_all_tables <- html_nodes(Oregon, "table")
#Parse an html table into a data frame.
html_table(Oregon_expenses)
Oregon_Expenses_1 <- html_table(Oregon_expenses[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Oregon_occupations <- html_nodes(Oregon, "table.occupations_table")
#Parse an html table into a data frame.
html_table(Oregon_occupations)
Oregon_Occupations_1 <- html_table(Oregon_occupations[[1]])
#Add the State Name as a Column
Oregon_Occupations_1$State <- "Oregon"
Oregon_Occupations_1 <- Oregon_Occupations_1[,c(3, 1:2)]
#Create variable with html of Pennsylvania
Pennsylvania <- read_html("http://livingwage.mit.edu/states/42")
# Grab all the tables from the webpage
Pennsylvania_tbls <- html_nodes(Pennsylvania, "table")
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Pennsylvania_wages <- html_nodes(Pennsylvania, "table.wages_table")
#Parse an html table into a data frame.
html_table(Pennsylvania_wages)
Pennsylvania_Wages_1 <- html_table(Pennsylvania_wages[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Pennsylvania_expenses <- html_nodes(Pennsylvania, "table.expenses_table")
Pennsylvania_all_tables <- html_nodes(Pennsylvania, "table")
#Parse an html table into a data frame.
html_table(Pennsylvania_expenses)
Pennsylvania_Expenses_1 <- html_table(Pennsylvania_expenses[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Pennsylvania_occupations <- html_nodes(Pennsylvania, "table.occupations_table")
#Parse an html table into a data frame.
html_table(Pennsylvania_occupations)
Pennsylvania_Occupations_1 <- html_table(Pennsylvania_occupations[[1]])
#Add the State Name as a Column
Pennsylvania_Occupations_1$State <- "Pennsylvania"
Pennsylvania_Occupations_1 <- Pennsylvania_Occupations_1[,c(3, 1:2)]
#Create variable with html of Rhode_Island
Rhode_Island <- read_html("http://livingwage.mit.edu/states/44")
# Grab all the tables from the webpage
Rhode_Island_tbls <- html_nodes(Rhode_Island, "table")
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Rhode_Island_wages <- html_nodes(Rhode_Island, "table.wages_table")
#Parse an html table into a data frame.
html_table(Rhode_Island_wages)
Rhode_Island_Wages_1 <- html_table(Rhode_Island_wages[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Rhode_Island_expenses <- html_nodes(Rhode_Island, "table.expenses_table")
Rhode_Island_all_tables <- html_nodes(Rhode_Island, "table")
#Parse an html table into a data frame.
html_table(Rhode_Island_expenses)
Rhode_Island_Expenses_1 <- html_table(Rhode_Island_expenses[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Rhode_Island_occupations <- html_nodes(Rhode_Island, "table.occupations_table")
#Parse an html table into a data frame.
html_table(Rhode_Island_occupations)
Rhode_Island_Occupations_1 <- html_table(Rhode_Island_occupations[[1]])
#Add the State Name as a Column
Rhode_Island_Occupations_1$State <- "Rhode"
Rhode_Island_Occupations_1 <- Rhode_Island_Occupations_1[,c(3, 1:2)]
#Create variable with html of South_Carolina
South_Carolina <- read_html("http://livingwage.mit.edu/states/45")
# Grab all the tables from the webpage
South_Carolina_tbls <- html_nodes(South_Carolina, "table")
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
South_Carolina_wages <- html_nodes(South_Carolina, "table.wages_table")
#Parse an html table into a data frame.
html_table(South_Carolina_wages)
South_Carolina_Wages_1 <- html_table(South_Carolina_wages[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
South_Carolina_expenses <- html_nodes(South_Carolina, "table.expenses_table")
South_Carolina_all_tables <- html_nodes(South_Carolina, "table")
#Parse an html table into a data frame.
html_table(South_Carolina_expenses)
South_Carolina_Expenses_1 <- html_table(South_Carolina_expenses[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
South_Carolina_occupations <- html_nodes(South_Carolina, "table.occupations_table")
#Parse an html table into a data frame.
html_table(South_Carolina_occupations)
South_Carolina_Occupations_1 <- html_table(South_Carolina_occupations[[1]])
#Add the State Name as a Column
South_Carolina_Occupations_1$State <- "South_Carolina"
South_Carolina_Occupations_1 <- South_Carolina_Occupations_1[,c(3, 1:2)]
#Create variable with html of South_Dakota
South_Dakota <- read_html("http://livingwage.mit.edu/states/46")
# Grab all the tables from the webpage
South_Dakota_tbls <- html_nodes(South_Dakota, "table")
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
South_Dakota_wages <- html_nodes(South_Dakota, "table.wages_table")
#Parse an html table into a data frame.
html_table(South_Dakota_wages)
South_Dakota_Wages_1 <- html_table(South_Dakota_wages[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
South_Dakota_expenses <- html_nodes(South_Dakota, "table.expenses_table")
South_Dakota_all_tables <- html_nodes(South_Dakota, "table")
#Parse an html table into a data frame.
html_table(South_Dakota_expenses)
South_Dakota_Expenses_1 <- html_table(South_Dakota_expenses[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
South_Dakota_occupations <- html_nodes(South_Dakota, "table.occupations_table")
#Parse an html table into a data frame.
html_table(South_Dakota_occupations)
South_Dakota_Occupations_1 <- html_table(South_Dakota_occupations[[1]])
#Add the State Name as a Column
South_Dakota_Occupations_1$State <- "South_Dakota"
South_Dakota_Occupations_1 <- South_Dakota_Occupations_1[,c(3, 1:2)]
#Create variable with html of Tennessee
Tennessee <- read_html("http://livingwage.mit.edu/states/47")
# Grab all the tables from the webpage
Tennessee_tbls <- html_nodes(Tennessee, "table")
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Tennessee_wages <- html_nodes(Tennessee, "table.wages_table")
#Parse an html table into a data frame.
html_table(Tennessee_wages)
Tennessee_Wages_1 <- html_table(Tennessee_wages[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Tennessee_expenses <- html_nodes(Tennessee, "table.expenses_table")
Tennessee_all_tables <- html_nodes(Tennessee, "table")
#Parse an html table into a data frame.
html_table(Tennessee_expenses)
Tennessee_Expenses_1 <- html_table(Tennessee_expenses[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Tennessee_occupations <- html_nodes(Tennessee, "table.occupations_table")
#Parse an html table into a data frame.
html_table(Tennessee_occupations)
Tennessee_Occupations_1 <- html_table(Tennessee_occupations[[1]])
#Add the State Name as a Column
Tennessee_Occupations_1$State <- "Tennessee"
Tennessee_Occupations_1 <- Tennessee_Occupations_1[,c(3, 1:2)]
#Create variable with html of Texas
Texas <- read_html("http://livingwage.mit.edu/states/48")
# Grab all the tables from the webpage
Texas_tbls <- html_nodes(Texas, "table")
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Texas_wages <- html_nodes(Texas, "table.wages_table")
#Parse an html table into a data frame.
html_table(Texas_wages)
Texas_Wages_1 <- html_table(Texas_wages[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Texas_expenses <- html_nodes(Texas, "table.expenses_table")
Texas_all_tables <- html_nodes(Texas, "table")
#Parse an html table into a data frame.
html_table(Texas_expenses)
Texas_Expenses_1 <- html_table(Texas_expenses[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Texas_occupations <- html_nodes(Texas, "table.occupations_table")
#Parse an html table into a data frame.
html_table(Texas_occupations)
Texas_Occupations_1 <- html_table(Texas_occupations[[1]])
#Add the State Name as a Column
Texas_Occupations_1$State <- "Texas"
Texas_Occupations_1 <- Texas_Occupations_1[,c(3, 1:2)]
#Create variable with html of Utah
Utah <- read_html("http://livingwage.mit.edu/states/49")
# Grab all the tables from the webpage
Utah_tbls <- html_nodes(Utah, "table")
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Utah_wages <- html_nodes(Utah, "table.wages_table")
#Parse an html table into a data frame.
html_table(Utah_wages)
Utah_Wages_1 <- html_table(Utah_wages[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Utah_expenses <- html_nodes(Utah, "table.expenses_table")
Utah_all_tables <- html_nodes(Utah, "table")
#Parse an html table into a data frame.
html_table(Utah_expenses)
Utah_Expenses_1 <- html_table(Utah_expenses[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Utah_occupations <- html_nodes(Utah, "table.occupations_table")
#Parse an html table into a data frame.
html_table(Utah_occupations)
Utah_Occupations_1 <- html_table(Utah_occupations[[1]])
#Add the State Name as a Column
Utah_Occupations_1$State <- "Utah"
Utah_Occupations_1 <- Utah_Occupations_1[,c(3, 1:2)]
#Create variable with html of Vermont
Vermont <- read_html("http://livingwage.mit.edu/states/50")
# Grab all the tables from the webpage
Vermont_tbls <- html_nodes(Vermont, "table")
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Vermont_wages <- html_nodes(Vermont, "table.wages_table")
#Parse an html table into a data frame.
html_table(Vermont_wages)
Vermont_Wages_1 <- html_table(Vermont_wages[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Vermont_expenses <- html_nodes(Vermont, "table.expenses_table")
Vermont_all_tables <- html_nodes(Vermont, "table")
#Parse an html table into a data frame.
html_table(Vermont_expenses)
Vermont_Expenses_1 <- html_table(Vermont_expenses[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Vermont_occupations <- html_nodes(Vermont, "table.occupations_table")
#Parse an html table into a data frame.
html_table(Vermont_occupations)
Vermont_Occupations_1 <- html_table(Vermont_occupations[[1]])
#Add the State Name as a Column
Vermont_Occupations_1$State <- "Vermont"
Vermont_Occupations_1 <- Vermont_Occupations_1[,c(3, 1:2)]
#Create variable with html of Virginia
Virginia <- read_html("http://livingwage.mit.edu/states/51")
# Grab all the tables from the webpage
Virginia_tbls <- html_nodes(Virginia, "table")
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Virginia_wages <- html_nodes(Virginia, "table.wages_table")
#Parse an html table into a data frame.
html_table(Virginia_wages)
Virginia_Wages_1 <- html_table(Virginia_wages[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Virginia_expenses <- html_nodes(Virginia, "table.expenses_table")
Virginia_all_tables <- html_nodes(Virginia, "table")
#Parse an html table into a data frame.
html_table(Virginia_expenses)
Virginia_Expenses_1 <- html_table(Virginia_expenses[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Virginia_occupations <- html_nodes(Virginia, "table.occupations_table")
#Parse an html table into a data frame.
html_table(Virginia_occupations)
Virginia_Occupations_1 <- html_table(Virginia_occupations[[1]])
#Add the State Name as a Column
Virginia_Occupations_1$State <- "Virginia"
Virginia_Occupations_1 <- Virginia_Occupations_1[,c(3, 1:2)]
#Create variable with html of Washington
Washington <- read_html("http://livingwage.mit.edu/states/53")
# Grab all the tables from the webpage
Washington_tbls <- html_nodes(Washington, "table")
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Washington_wages <- html_nodes(Washington, "table.wages_table")
#Parse an html table into a data frame.
html_table(Washington_wages)
Washington_Wages_1 <- html_table(Washington_wages[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Washington_expenses <- html_nodes(Washington, "table.expenses_table")
Washington_all_tables <- html_nodes(Washington, "table")
#Parse an html table into a data frame.
html_table(Washington_expenses)
Washington_Expenses_1 <- html_table(Washington_expenses[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Washington_occupations <- html_nodes(Washington, "table.occupations_table")
#Parse an html table into a data frame.
html_table(Washington_occupations)
Washington_Occupations_1 <- html_table(Washington_occupations[[1]])
#Add the State Name as a Column
Washington_Occupations_1$State <- "Washington"
Washington_Occupations_1 <- Washington_Occupations_1[,c(3, 1:2)]
#Create variable with html of West_Virginia
West_Virginia <- read_html("http://livingwage.mit.edu/states/54")
# Grab all the tables from the webpage
West_Virginia_tbls <- html_nodes(West_Virginia, "table")
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
West_Virginia_wages <- html_nodes(West_Virginia, "table.wages_table")
#Parse an html table into a data frame.
html_table(West_Virginia_wages)
West_Virginia_Wages_1 <- html_table(West_Virginia_wages[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
West_Virginia_expenses <- html_nodes(West_Virginia, "table.expenses_table")
West_Virginia_all_tables <- html_nodes(West_Virginia, "table")
#Parse an html table into a data frame.
html_table(West_Virginia_expenses)
West_Virginia_Expenses_1 <- html_table(West_Virginia_expenses[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
West_Virginia_occupations <- html_nodes(West_Virginia, "table.occupations_table")
#Parse an html table into a data frame.
html_table(West_Virginia_occupations)
West_Virginia_Occupations_1 <- html_table(West_Virginia_occupations[[1]])
#Add the State Name as a Column
West_Virginia_Occupations_1$State <- "West_Virginia"
West_Virginia_Occupations_1 <- West_Virginia_Occupations_1[,c(3, 1:2)]
#Create variable with html of Wisconsin
Wisconsin <- read_html("http://livingwage.mit.edu/states/55")
# Grab all the tables from the webpage
Wisconsin_tbls <- html_nodes(Wisconsin, "table")
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Wisconsin_wages <- html_nodes(Wisconsin, "table.wages_table")
#Parse an html table into a data frame.
html_table(Wisconsin_wages)
Wisconsin_Wages_1 <- html_table(Wisconsin_wages[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Wisconsin_expenses <- html_nodes(Wisconsin, "table.expenses_table")
Wisconsin_all_tables <- html_nodes(Wisconsin, "table")
#Parse an html table into a data frame.
html_table(Wisconsin_expenses)
Wisconsin_Expenses_1 <- html_table(Wisconsin_expenses[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Wisconsin_occupations <- html_nodes(Wisconsin, "table.occupations_table")
#Parse an html table into a data frame.
html_table(Wisconsin_occupations)
Wisconsin_Occupations_1 <- html_table(Wisconsin_occupations[[1]])
#Add the State Name as a Column
Wisconsin_Occupations_1$State <- "Wisconsin"
Wisconsin_Occupations_1 <- Wisconsin_Occupations_1[,c(3, 1:2)]
#Create variable with html of Wyoming
Wyoming <- read_html("http://livingwage.mit.edu/states/56")
# Grab all the tables from the webpage
Wyoming_tbls <- html_nodes(Wyoming, "table")
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Wyoming_wages <- html_nodes(Wyoming, "table.wages_table")
#Parse an html table into a data frame.
html_table(Wyoming_wages)
Wyoming_Wages_1 <- html_table(Wyoming_wages[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Wyoming_expenses <- html_nodes(Wyoming, "table.expenses_table")
Wyoming_all_tables <- html_nodes(Wyoming, "table")
#Parse an html table into a data frame.
html_table(Wyoming_expenses)
Wyoming_Expenses_1 <- html_table(Wyoming_expenses[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
Wyoming_occupations <- html_nodes(Wyoming, "table.occupations_table")
#Parse an html table into a data frame.
html_table(Wyoming_occupations)
Wyoming_Occupations_1 <- html_table(Wyoming_occupations[[1]])
#Add the State Name as a Column
Wyoming_Occupations_1$State <- "Wyoming"
Wyoming_Occupations_1 <- Wyoming_Occupations_1[,c(3, 1:2)]
parse_number(Wyoming_Occupations_1$`Typical Annual Salary`)
Wyoming_Total_Occupations <- parse_number(Wyoming_Occupations_1$`Typical Annual Salary`)
Wyoming_Occupations_1$Typical_Annual_Salary <- Wyoming_Total_Occupations
#Combining all 50 States together (Occupation Tables)
Combining_States_Occupation <- rbind(Alabama_Occupations_1, Alaska_Occupations_1, Arizona_Occupations_1, Arkansas_Occupations_1,
California_Occupations_1, Colorado_Occupations_1, Connecticut_Occupations_1, Delaware_Occupations_1, District_of_Columbia_Occupations_1,
Florida_Occupations_1, Georgia_Occupations_1, Hawaii_Occupations_1, Idaho_Occupations_1, Illinois_Occupations_1, Indiana_Occupations_1,
Iowa_Occupations_1, Kansas_Occupations_1, Kentucky_Occupations_1, Louisiana_Occupations_1, Maine_Occupations_1, Maryland_Occupations_1,
Massachusetts_Occupations_1, Michigan_Occupations_1, Minnesota_Occupations_1, Mississippi_Occupations_1, Missouri_Occupations_1,
Montana_Occupations_1, Nebraska_Occupations_1, Nevada_Occupations_1, New_Hampshire_Occupations_1, New_Jersey_Occupations_1,
New_Mexico_Occupations_1, New_York_Occupations_1, North_Carolina_Occupations_1, North_Dakota_Occupations_1, Ohio_Occupations_1,
Oklahoma_Occupations_1, Oregon_Occupations_1, Pennsylvania_Occupations_1, Rhode_Island_Occupations_1, South_Carolina_Occupations_1,
South_Dakota_Occupations_1, Tennessee_Occupations_1, Texas_Occupations_1, Utah_Occupations_1, Vermont_Occupations_1, Virginia_Occupations_1,
Washington_Occupations_1, West_Virginia_Occupations_1, Wisconsin_Occupations_1, Wyoming_Occupations_1)
#Turning Combining_States_Occupation into Numeric from Character
#Combining_States_Occupation$`Typical Annual Salary` <- as.numeric(as.character(Combining_States_Occupation$`Typical Annual Salary`, na.rm=TRUE))
#Calculate the Mean of the Typical Annual Salary Column with dropping the NA values from the Calculation
#By using the na.rem = TRUE which means remove the NA Values
#mean(Combining_States_Occupation$`Typical Annual Salary`,na.rm = TRUE)
#summary(Combining_States_Occupation$`Typical Annual Salary`,na.rm=TRUE)
#If you want to convert the character to a numeric as well, then first convert it to a factor (using as.factor) and
#save/ overwrite existing variable. Next convert this factor variable to numeric (using as.numeric). You wouldn't be
#creating NAs this way and will be able to convert the data-set you have into numeric.
parse_number(Combining_States_Occupation$`Typical Annual Salary`)
States_Total_Occupations <- parse_number(Combining_States_Occupation$`Typical Annual Salary`)
Combining_States_Occupation$Typical_Annual_Salary <- States_Total_Occupations
#Combining_States_Occupation$`Typical Annual Salary` <- as.factor(as.character(Combining_States_Occupation$`Typical Annual Salary`))
#Newer_Combined <- Combining_States_Occupation
#Newer_Combined$`Typical Annual Salary` <- as.numeric(as.factor(Newer_Combined$`Typical Annual Salary`))
#performing the boxplot to get an idea of what the entire dataset looks like
ggboxplot(California_Occupations_1, x = "Occupation", y = "Salary",
color = "Occupation", palette = c("#00AFBB", "#E7B800", "#FC4E07", "#00AF00", "#E7B855", "#FC4E44", "#00AF47","#00AFBB", "#E7B800", "#FC4E07", "#00AF00", "#E7B855", "#FC4E07", "#00AF00", "#E7B855", "#FC4E44", "#00AF47", "#00AFBB", "#E7B800", "#FC4E07", "#00AF00", "#E7B855"),
order = c("Management", "Business & Financial Operations", "Computer & Mathematical", "Architecuture & Engineering", "Life, Phyiscal & Social Science", "Community & Social Service", "Legal", "Education, Training, & Library", "Arts, Design, Entertainment", "Sports, & Media", "Healthcare Practioners & Technical", "Healthcare Support", "Protective Service", "Food Preparation & Service Related", "Building & Grounds Cleaning & Maintenance", "Personal Care & Service", "Sales & Related", "Office & Administration Support", " Farming, Fishing, & Forestry", "Construction & Extraction", "Installation, Maintenance, & Repair", "Production", "Transportation & Material Moving"),
ylab = "Salary", xlab = "Occupation")
View(District_of_Columbia_Occupations_1)
# Create variable with html of District_of_Columbia
District_of_Columbia <- read_html("http://livingwage.mit.edu/states/11")
# Grab all the tables from the webpage
District_of_Columbia_tbls <- html_nodes(Delaware, "table")
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
District_of_Columbia_wages <- html_nodes(Delaware, "table.wages_table")
#Parse an html table into a data frame.
html_table(District_of_Columbia_wages)
District_of_Columbia_Wages_1 <- html_table(District_of_Columbia_wages[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
District_of_Columbia_expenses <- html_nodes(Delaware, "table.expenses_table")
District_of_Columbia_all_tables <- html_nodes(Delaware, "table")
#Parse an html table into a data frame.
html_table(District_of_Columbia_expenses)
District_of_Columbia_Expenses_1 <- html_table(District_of_Columbia_expenses[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
District_of_Columbia_occupations <- html_nodes(Delaware, "table.occupations_table")
#Parse an html table into a data frame.
html_table(District_of_Columbia_occupations)
District_of_Columbia_Occupations_1 <- html_table(District_of_Columbia_occupations[[1]])
#Add the State Name as a Column
District_of_Columbia_Occupations_1$State <- "District_of_Columbia"
District_of_Columbia_Occupations_1 <- District_of_Columbia_Occupations_1[,c(3, 1:2)]
parse_number(District_of_Columbia_Occupations_1$`Typical Annual Salary`)
District_of_Columbia_Total_Occupations <- parse_number(District_of_Columbia_Occupations_1$`Typical Annual Salary`)
District_of_Columbia_Occupations_1$Typical_Annual_Salary <- Colorado_Total_Occupations
View(District_of_Columbia_Occupations_1)
mean(California_Occupations_1)
mean(California_Total_Occupations)
mean(Hawaii_Total_Occupations)
mean(Mississippi_Total_Occupations)
# Create variable with html of California
California <- read_html("http://livingwage.mit.edu/states/06")
# Grab all the tables from the webpage
California_tbls <- html_nodes(California, "table")
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
California_wages <- html_nodes(California, "table.wages_table")
#Parse an html table into a data frame.
html_table(California_wages)
California_Wages_1 <- html_table(California_wages[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
California_expenses <- html_nodes(California, "table.expenses_table")
California_all_tables <- html_nodes(California, "table")
#Parse an html table into a data frame.
html_table(California_expenses)
California_Expenses_1 <- html_table(California_expenses[[1]])
#When given a list of nodes, html_node will always return a list of the same length, the length of html_nodes might be longer or shorter.
California_occupations <- html_nodes(California, "table.occupations_table")
#Parse an html table into a data frame.
html_table(California_occupations)
California_Occupations_1 <- html_table(California_occupations[[1]])
#Add the State Name as a Column
California_Occupations_1$State <- "California"
California_Occupations_1 <- California_Occupations_1[,c(3, 1:2)]
parse_number(California_Occupations_1$`Typical Annual Salary`)
California_Total_Occupations <- parse_number(California_Occupations_1$`Typical Annual Salary`)
California_Occupations_1$Typical_Annual_Salary <- California_Total_Occupations
mean(California_Total_Occupations)
View(District_of_Columbia_Occupations_1)
View(Alabama_Occupations_1)
View(Alabama_Expenses_1)
View(California_Expenses_1)
View(California_Wages_1)
mean(California_Total_Occupations)
mean(Mississippi_Total_Occupations)
View(Mississippi_Wages_1)
View(Hawaii_Wages_1)
mean(Hawaii_Total_Occupations)
mean(California_Total_Occupations)
View(California_Wages_1)
View(Hawaii_Wages_1)
View(Hawaii_Wages_1)
View(California_Wages_1)
View(Mississippi_Wages_1)
mean(Mississippi_Total_Occupations)
mean(California_Total_Occupations)
mean(Hawaii_Total_Occupations)
View(Hawaii_Wages_1)
View(California_Wages_1)
